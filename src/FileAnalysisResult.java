import java.util.Map;
import java.util.Set;

public class FileAnalysisResult {
    private final String fileName;
    private final int totalLines;
    private final int googlebotCount;
    private final int yandexbotCount;
    private final double googlebotPercentage;
    private final double yandexbotPercentage;
    private final double averageTrafficPerHour;
    private final long totalTraffic;
    private final Statistics statistics;

    public FileAnalysisResult(String fileName, Statistics stats) {
        this.fileName = fileName;
        this.totalLines = stats.getTotalEntries();
        this.googlebotCount = stats.getGooglebotCount();
        this.yandexbotCount = stats.getYandexbotCount();
        this.googlebotPercentage = stats.getGooglebotPercentage();
        this.yandexbotPercentage = stats.getYandexbotPercentage();
        this.averageTrafficPerHour = stats.getTrafficRate();
        this.totalTraffic = stats.getTotalTraffic();
        this.statistics = stats;
    }

    public void printResults() {
        System.out.println("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ '" + fileName + "':");
        System.out.println("1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: " + totalLines);
        System.out.printf("2. –ó–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Googlebot: %d (%.2f%%)%n",
                googlebotCount, googlebotPercentage);
        System.out.printf("3. –ó–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç YandexBot: %d (%.2f%%)%n",
                yandexbotCount, yandexbotPercentage);
        System.out.println("4. –û–±—â–∏–π –æ–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞: " + formatBytes(totalTraffic));
        System.out.printf("5. –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ —á–∞—Å: %s/—á–∞—Å%n",
                formatBytes(averageTrafficPerHour));
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        System.out.printf("6. –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π –≤ —á–∞—Å: %.2f/—á–∞—Å%n",
                statistics.getAverageVisitsPerHour());
        System.out.printf("7. –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: %.2f/—á–∞—Å%n",
                statistics.getAverageErrorRequestsPerHour());
        System.out.printf("8. –°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: %.2f –ø–æ—Å–µ—â–µ–Ω–∏–π/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å%n",
                statistics.getAverageVisitsPerUser());
        System.out.println("9. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + statistics.getUniqueHumanUsers());
        System.out.println("10. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: " + statistics.getErrorRequests());
        System.out.println("11. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: " + statistics.getExistingPages().size());
        System.out.println("12. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: " + statistics.getNotFoundPages().size());

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        Map<String, Double> osStats = statistics.getOsStatistics();
        System.out.println("13. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:");
        if (!osStats.isEmpty()) {
            osStats.forEach((os, percentage) ->
                    System.out.printf("   - %s: %.2f%%%n", os, percentage * 100));
        } else {
            System.out.println("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö");
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤
        Map<String, Double> browserStats = statistics.getBrowserStatistics();
        System.out.println("14. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤:");
        if (!browserStats.isEmpty()) {
            browserStats.forEach((browser, percentage) ->
                    System.out.printf("   - %s: %.2f%%%n", browser, percentage * 100));
        } else {
            System.out.println("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–∞—É–∑–µ—Ä–∞—Ö");
        }

        if (totalLines == 0) {
            System.out.println("‚ö†Ô∏è  –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ª–æ–≥-–∑–∞–ø–∏—Å–µ–π");
        }
    }

    private String formatBytes(double bytes) {
        if (bytes < 1024) {
            return String.format("%.0f –±–∞–π—Ç", bytes);
        } else if (bytes < 1024 * 1024) {
            return String.format("%.2f –ö–ë", bytes / 1024);
        } else if (bytes < 1024 * 1024 * 1024) {
            return String.format("%.2f –ú–ë", bytes / (1024 * 1024));
        } else {
            return String.format("%.2f –ì–ë", bytes / (1024 * 1024 * 1024));
        }
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã
    public String getFileName() { return fileName; }
    public int getTotalLines() { return totalLines; }
    public int getGooglebotCount() { return googlebotCount; }
    public int getYandexbotCount() { return yandexbotCount; }
    public double getGooglebotPercentage() { return googlebotPercentage; }
    public double getYandexbotPercentage() { return yandexbotPercentage; }
    public double getAverageTrafficPerHour() { return averageTrafficPerHour; }
    public long getTotalTraffic() { return totalTraffic; }
    public Statistics getStatistics() { return statistics; }
    public Set<String> getExistingPages() { return statistics.getExistingPages(); }
    public Set<String> getNotFoundPages() { return statistics.getNotFoundPages(); }
    public Map<String, Double> getBrowserStatistics() { return statistics.getBrowserStatistics(); }
}