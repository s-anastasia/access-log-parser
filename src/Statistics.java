import java.net.URI;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.*;

// –ö–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
public class Statistics {

    // ========== –ü–û–õ–Ø –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ==========

    // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private long totalTraffic; // –û–±—â–∏–π –æ–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç–∞—Ö
    private LocalDateTime minTime; // –°–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    private LocalDateTime maxTime; // –°–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    private int totalEntries; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤
    private int googlebotCount; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Googlebot
    private int yandexbotCount; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç YandexBot

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    private Set<String> existingPages; // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–∫–æ–¥ 200)
    private Set<String> notFoundPages; // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–∫–æ–¥ 404)

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
    private Map<String, Integer> osCounts; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    private Map<String, Integer> browserCounts; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private int humanVisits; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–Ω–µ –±–æ—Ç–∞–º–∏)
    private int errorRequests; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (4xx –∏ 5xx)
    private Set<String> uniqueHumanIPs; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private Map<Long, Integer> visitsPerSecond; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π –≤ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    private Set<String> refererDomains; // –î–æ–º–µ–Ω—ã —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
    private Map<String, Integer> visitsPerUser; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // ========== –ö–û–ù–°–¢–†–£–ö–¢–û–† ==========

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ Statistics, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–æ–ª—è
     */
    public Statistics() {
        reset();
    }

    // ========== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–ó–ê ==========

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
     * @param fileName –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @param lines —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
     */
    public FileAnalysisResult analyzeFile(String fileName, List<String> lines) {
        System.out.println("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª...");

        int processedLines = 0;
        int errorLines = 0;

        for (String line : lines) {
            try {
                LogEntry entry = new LogEntry(line);
                addEntry(entry);
                processedLines++;

            } catch (IllegalArgumentException e) {
                System.out.println("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: " + e.getMessage());
                errorLines++;
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: " + e.getMessage());
                errorLines++;
            }
        }

        System.out.printf("‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: %d, –æ—à–∏–±–æ–∫: %d%n", processedLines, errorLines);
        return new FileAnalysisResult(fileName, this);
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     * @param entry –æ–±—ä–µ–∫—Ç LogEntry –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
     */
    public void addEntry(LogEntry entry) {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        long dataSize = entry.getResponseSize();
        if (dataSize < 0) {
            System.out.println("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö: " + dataSize);
            return;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
        totalEntries++;
        totalTraffic += dataSize;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        updateTimeRange(entry.getTime());

        // –ê–Ω–∞–ª–∏–∑ User-Agent
        analyzeUserAgent(entry);

        // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü
        analyzePages(entry);

        // –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
        analyzeErrors(entry);

        // –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        analyzeUsers(entry);

        // –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
        analyzeReferers(entry);
    }

    // ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê ==========

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param entryTime –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
     */
    private void updateTimeRange(LocalDateTime entryTime) {
        if (minTime == null) {
            minTime = entryTime;
            maxTime = entryTime;
        } else {
            if (entryTime.isBefore(minTime)) {
                minTime = entryTime;
            }
            if (entryTime.isAfter(maxTime)) {
                maxTime = entryTime;
            }
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç User-Agent –∑–∞–ø—Ä–æ—Å–∞
     * @param entry –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    private void analyzeUserAgent(LogEntry entry) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç –±–æ—Ç–∞
        boolean isBot = entry.getAgent().isBot();
        String userAgent = entry.getAgent().toString().toLowerCase();

        // –ü–æ–¥—Å—á–µ—Ç –±–æ—Ç–æ–≤
        if (userAgent.contains("googlebot")) {
            googlebotCount++;
        } else if (userAgent.contains("yandexbot")) {
            yandexbotCount++;
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –û–°
        String osType = entry.getAgent().getOsType();
        osCounts.put(osType, osCounts.getOrDefault(osType, 0) + 1);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤
        String browserType = entry.getAgent().getBrowserType();
        browserCounts.put(browserType, browserCounts.getOrDefault(browserType, 0) + 1);
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–æ–¥—ã –æ—Ç–≤–µ—Ç–æ–≤
     * @param entry –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    private void analyzePages(LogEntry entry) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ 200)
        if (entry.getResponseCode() == 200) {
            existingPages.add(entry.getPath());
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ 404)
        if (entry.getResponseCode() == 404) {
            notFoundPages.add(entry.getPath());
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
     * @param entry –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    private void analyzeErrors(LogEntry entry) {
        // –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (4xx –∏ 5xx)
        if (entry.getResponseCode() >= 400 && entry.getResponseCode() < 600) {
            errorRequests++;
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è
     * @param entry –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    private void analyzeUsers(LogEntry entry) {
        boolean isBot = entry.getAgent().isBot();

        // –ü–æ–¥—Å—á–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP
        if (!isBot) {
            humanVisits++;
            uniqueHumanIPs.add(entry.getIpAddr());

            // –ü–∏–∫–æ–≤–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥—É
            long secondTimestamp = entry.getTime().toEpochSecond(java.time.ZoneOffset.UTC);
            visitsPerSecond.put(secondTimestamp, visitsPerSecond.getOrDefault(secondTimestamp, 0) + 1);

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            String ip = entry.getIpAddr();
            visitsPerUser.put(ip, visitsPerUser.getOrDefault(ip, 0) + 1);
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä—ã
     * @param entry –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    private void analyzeReferers(LogEntry entry) {
        // –°–±–æ—Ä –¥–æ–º–µ–Ω–æ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
        if (entry.getReferer() != null && !entry.getReferer().isEmpty() && !"-".equals(entry.getReferer())) {
            try {
                URI uri = new URI(entry.getReferer());
                String domain = uri.getHost();
                if (domain != null && !domain.isEmpty()) {
                    refererDomains.add(domain);
                }
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç referer: " + entry.getReferer());
            }
        }
    }

    // ========== –ú–ï–¢–û–î–´ –†–ê–°–ß–ï–¢–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò ==========

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç–∞—Ö/—á–∞—Å
     * @return —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ç—Ä–∞—Ñ–∏–∫–∞
     */
    public double getTrafficRate() {
        if (minTime == null || maxTime == null || totalEntries == 0) {
            return 0.0;
        }

        LocalDateTime startTime = minTime.isBefore(maxTime) ? minTime : maxTime;
        LocalDateTime endTime = minTime.isBefore(maxTime) ? maxTime : minTime;

        long hoursBetween = ChronoUnit.HOURS.between(startTime, endTime);
        return hoursBetween <= 0 ? totalTraffic : (double) totalTraffic / hoursBetween;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π —Å–∞–π—Ç–∞ –∑–∞ —á–∞—Å
     * @return —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π –≤ —á–∞—Å
     */
    public double getAverageVisitsPerHour() {
        if (minTime == null || maxTime == null || humanVisits == 0) {
            return 0.0;
        }

        LocalDateTime startTime = minTime.isBefore(maxTime) ? minTime : maxTime;
        LocalDateTime endTime = minTime.isBefore(maxTime) ? maxTime : minTime;

        long hoursBetween = ChronoUnit.HOURS.between(startTime, endTime);
        return hoursBetween <= 0 ? humanVisits : (double) humanVisits / hoursBetween;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
     * @return —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –≤ —á–∞—Å
     */
    public double getAverageErrorRequestsPerHour() {
        if (minTime == null || maxTime == null || errorRequests == 0) {
            return 0.0;
        }

        LocalDateTime startTime = minTime.isBefore(maxTime) ? minTime : maxTime;
        LocalDateTime endTime = minTime.isBefore(maxTime) ? maxTime : minTime;

        long hoursBetween = ChronoUnit.HOURS.between(startTime, endTime);
        return hoursBetween <= 0 ? errorRequests : (double) errorRequests / hoursBetween;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public double getAverageVisitsPerUser() {
        return (humanVisits == 0 || uniqueHumanIPs.isEmpty()) ?
                0.0 : (double) humanVisits / uniqueHumanIPs.size();
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–∏–∫–æ–≤—É—é –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Å–∞–π—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥—É
     * @return –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
     */
    private int calculatePeakVisitsPerSecond() {
        if (visitsPerSecond.isEmpty()) {
            return 0;
        }
        return Collections.max(visitsPerSecond.values());
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     * @return –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    private int calculateMaxVisitsPerUser() {
        if (visitsPerUser.isEmpty()) {
            return 0;
        }
        return Collections.max(visitsPerUser.values());
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     * @return –∫–∞—Ä—Ç–∞ —Å –¥–æ–ª—è–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (0-1)
     */
    public Map<String, Double> getOsStatistics() {
        Map<String, Double> osStatistics = new HashMap<>();
        if (totalEntries == 0) return osStatistics;

        for (Map.Entry<String, Integer> entry : osCounts.entrySet()) {
            double percentage = (double) entry.getValue() / totalEntries;
            osStatistics.put(entry.getKey(), percentage);
        }
        return osStatistics;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–∞—É–∑–µ—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     * @return –∫–∞—Ä—Ç–∞ —Å –¥–æ–ª—è–º–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤ (0-1)
     */
    public Map<String, Double> getBrowserStatistics() {
        Map<String, Double> browserStatistics = new HashMap<>();
        if (totalEntries == 0) return browserStatistics;

        for (Map.Entry<String, Integer> entry : browserCounts.entrySet()) {
            double percentage = (double) entry.getValue() / totalEntries;
            browserStatistics.put(entry.getKey(), percentage);
        }
        return browserStatistics;
    }

    // ========== –ú–ï–¢–û–î –°–ë–†–û–°–ê ==========

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
     */
    public void reset() {
        totalTraffic = 0;
        totalEntries = 0;
        googlebotCount = 0;
        yandexbotCount = 0;
        minTime = null;
        maxTime = null;
        existingPages = new HashSet<>();
        osCounts = new HashMap<>();
        notFoundPages = new HashSet<>();
        browserCounts = new HashMap<>();
        humanVisits = 0;
        errorRequests = 0;
        uniqueHumanIPs = new HashSet<>();
        visitsPerSecond = new HashMap<>();
        refererDomains = new HashSet<>();
        visitsPerUser = new HashMap<>();
    }

    // ========== –ì–ï–¢–¢–ï–†–´ ==========

    /**
     * @return –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    public int getTotalEntries() { return totalEntries; }

    /**
     * @return –æ–±—â–∏–π –æ–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç–∞—Ö
     */
    public long getTotalTraffic() { return totalTraffic; }

    /**
     * @return —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
     */
    public LocalDateTime getMinTime() { return minTime; }

    /**
     * @return —Å–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
     */
    public LocalDateTime getMaxTime() { return maxTime; }

    /**
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Googlebot
     */
    public int getGooglebotCount() { return googlebotCount; }

    /**
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç YandexBot
     */
    public int getYandexbotCount() { return yandexbotCount; }

    /**
     * @return –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Googlebot
     */
    public double getGooglebotPercentage() {
        return totalEntries > 0 ? (double) googlebotCount / totalEntries * 100 : 0;
    }

    /**
     * @return –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç YandexBot
     */
    public double getYandexbotPercentage() {
        return totalEntries > 0 ? (double) yandexbotCount / totalEntries * 100 : 0;
    }

    /**
     * @return –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–∫–æ–¥ 200)
     */
    public Set<String> getExistingPages() { return new HashSet<>(existingPages); }

    /**
     * @return –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–∫–æ–¥ 404)
     */
    public Set<String> getNotFoundPages() { return new HashSet<>(notFoundPages); }

    /**
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    public int getNotFoundPagesCount() { return notFoundPages.size(); }

    /**
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    public int getExistingPagesCount() { return existingPages.size(); }

    /**
     * @return —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
     */
    public Map<String, Integer> getOsCounts() { return new HashMap<>(osCounts); }

    /**
     * @return —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
     */
    public Map<String, Integer> getBrowserCounts() { return new HashMap<>(browserCounts); }

    /**
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
     */
    public int getHumanVisits() { return humanVisits; }

    /**
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    public int getErrorRequests() { return errorRequests; }

    /**
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public int getUniqueHumanUsers() { return uniqueHumanIPs.size(); }

    /**
     * @return –ø–∏–∫–æ–≤–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥—É
     */
    public int getPeakVisitsPerSecond() { return calculatePeakVisitsPerSecond(); }

    /**
     * @return –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    public int getMaxVisitsPerUser() { return calculateMaxVisitsPerUser(); }

    /**
     * @return –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤-—Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
     */
    public Set<String> getRefererDomains() { return new HashSet<>(refererDomains); }

    /**
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤-—Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
     */
    public int getRefererDomainsCount() { return refererDomains.size(); }

    /**
     * @return –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    public double getErrorRate() {
        return totalEntries > 0 ? (double) errorRequests / totalEntries * 100 : 0;
    }

    /**
     * @return –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
     */
    public double getHumanVisitPercentage() {
        return totalEntries > 0 ? (double) humanVisits / totalEntries * 100 : 0;
    }

    /**
     * @return –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ —á–∞—Å–∞—Ö
     */
    public long getTimeRangeInHours() {
        if (minTime == null || maxTime == null) return 0;
        LocalDateTime startTime = minTime.isBefore(maxTime) ? minTime : maxTime;
        LocalDateTime endTime = minTime.isBefore(maxTime) ? maxTime : minTime;
        return ChronoUnit.HOURS.between(startTime, endTime);
    }
}