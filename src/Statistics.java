import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.*;

// –ö–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
public class Statistics {

    private long totalTraffic; // –û–±—â–∏–π –æ–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç–∞—Ö
    private LocalDateTime minTime; // –°–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    private LocalDateTime maxTime; // –°–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    private int totalEntries; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    private int googlebotCount; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Googlebot
    private int yandexbotCount; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç YandexBot
    private Set<String> existingPages; // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–∫–æ–¥ 200)
    private Map<String, Integer> osCounts; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    private Set<String> notFoundPages; // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–∫–æ–¥ 404)
    private Map<String, Integer> browserCounts; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤

    // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ reset –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–µ
    public Statistics() {
        reset();
    }

 // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
    public FileAnalysisResult analyzeFile(String fileName, List<String> lines) {
        System.out.println("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª...");

        int processedLines = 0;
        int errorLines = 0;

        for (String line : lines) {
            try {
                LogEntry entry = new LogEntry(line);
                addEntry(entry);
                processedLines++;

            } catch (IllegalArgumentException e) {
                System.out.println("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: " + e.getMessage());
                errorLines++;
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: " + e.getMessage());
                errorLines++;
            }
        }

        System.out.printf("‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: %d, –æ—à–∏–±–æ–∫: %d%n", processedLines, errorLines);
        return new FileAnalysisResult(fileName, this);
    }

    //–ú–µ—Ç–æ–¥, –¥–æ–±–∞–≤–ª—è—é—â–∏–π –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ LogEntry)
    public void addEntry(LogEntry entry) {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        long dataSize = entry.getResponseSize(); // –∏–∑–º–µ–Ω–µ–Ω–æ —Å int –Ω–∞ long
        if (dataSize < 0) {
            System.out.println("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö: " + dataSize);
            return;
        }
     // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
        totalEntries++;
        totalTraffic += dataSize;
     // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        LocalDateTime entryTime = entry.getTime();
        if (minTime == null) {
            minTime = entryTime;
            maxTime = entryTime;
        } else {
            if (entryTime.isBefore(minTime)) {
                minTime = entryTime;
            }
            if (entryTime.isAfter(maxTime)) {
                maxTime = entryTime;
            }
        }

        // –ê–Ω–∞–ª–∏–∑ User-Agent –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–æ—Ç–æ–≤ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫)
        String userAgent = entry.getAgent().toString().toLowerCase();
        if (userAgent.contains("googlebot")) {
            googlebotCount++;
        } else if (userAgent.contains("yandexbot")) {
            yandexbotCount++;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ 200)
        if (entry.getResponseCode() == 200) {
            existingPages.add(entry.getPath());
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ 404)
        if (entry.getResponseCode() == 404) {
            notFoundPages.add(entry.getPath());
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        String osType = entry.getAgent().getOsType();
        osCounts.put(osType, osCounts.getOrDefault(osType, 0) + 1);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–∞—É–∑–µ—Ä–æ–≤
        String browserType = entry.getAgent().getBrowserType();
        browserCounts.put(browserType, browserCounts.getOrDefault(browserType, 0) + 1);
    }

    // –ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç–∞—Ö/—á–∞—Å
    public double getTrafficRate() {
        if (minTime == null || maxTime == null || totalEntries == 0) {
            return 0.0;
        }

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ minTime —Ä–∞–Ω—å—à–µ maxTime
        LocalDateTime startTime = minTime.isBefore(maxTime) ? minTime : maxTime;
        LocalDateTime endTime = minTime.isBefore(maxTime) ? maxTime : minTime;

        long hoursBetween = ChronoUnit.HOURS.between(startTime, endTime);

        if (hoursBetween <= 0) {
            return totalTraffic; // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞
        }

        return (double) totalTraffic / hoursBetween;
    }

    // –°–±—Ä–æ—Å –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    public void reset() {
        totalTraffic = 0;
        totalEntries = 0;
        googlebotCount = 0;
        yandexbotCount = 0;
        minTime = null;
        maxTime = null;
        existingPages = new HashSet<>();
        osCounts = new HashMap<>();
        notFoundPages = new HashSet<>();
        browserCounts = new HashMap<>();
    }

    // –ú–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞ (–∫–æ–¥ 200)
    public Set<String> getExistingPages() {
        return new HashSet<>(existingPages);
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞ (–∫–æ–¥ 404)
    public Set<String> getNotFoundPages() {
        return new HashSet<>(notFoundPages); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    }

    // –ú–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (–¥–æ–ª–∏ –æ—Ç 0 –¥–æ 1)
    public Map<String, Double> getOsStatistics() {
        Map<String, Double> osStatistics = new HashMap<>();

        if (totalEntries == 0) {
            return osStatistics; // –ü—É—Å—Ç–∞—è –∫–∞—Ä—Ç–∞, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        for (Map.Entry<String, Integer> entry : osCounts.entrySet()) {
            double percentage = (double) entry.getValue() / totalEntries;
            osStatistics.put(entry.getKey(), percentage);
        }

        return osStatistics;
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–∞—É–∑–µ—Ä–æ–≤ (–¥–æ–ª–∏ –æ—Ç 0 –¥–æ 1)
    public Map<String, Double> getBrowserStatistics() {
        Map<String, Double> browserStatistics = new HashMap<>();

        if (totalEntries == 0) {
            return browserStatistics; // –ü—É—Å—Ç–∞—è –∫–∞—Ä—Ç–∞, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        for (Map.Entry<String, Integer> entry : browserCounts.entrySet()) {
            double percentage = (double) entry.getValue() / totalEntries;
            browserStatistics.put(entry.getKey(), percentage);
        }

        return browserStatistics;
    }


    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    public Map<String, Integer> getOsCounts() {
        return new HashMap<>(osCounts);
    }

    public Map<String, Integer> getBrowserCounts() {
        return new HashMap<>(browserCounts);
    }

    public int getNotFoundPagesCount() {
        return notFoundPages.size();
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã
    public int getTotalEntries() { return totalEntries; }
    public int getGooglebotCount() { return googlebotCount; }
    public int getYandexbotCount() { return yandexbotCount; }
    public double getGooglebotPercentage() {
        return totalEntries > 0 ? (double) googlebotCount / totalEntries * 100 : 0;
    }
    public double getYandexbotPercentage() {
        return totalEntries > 0 ? (double) yandexbotCount / totalEntries * 100 : 0;
    }
    public long getTotalTraffic() { return totalTraffic; }
}
